{"/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/test.js":"/* istanbul instrument in package npmtest_gulp_server_livereload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/lib.npmtest_gulp_server_livereload.js":"/* istanbul instrument in package npmtest_gulp_server_livereload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_server_livereload = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_server_livereload = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-server-livereload && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_server_livereload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_server_livereload\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_server_livereload.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_server_livereload.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_server_livereload.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_server_livereload.__dirname + '/lib.npmtest_gulp_server_livereload.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/node_modules/gulp-server-livereload/src/index.js":"\"use strict\";\n\nvar _ = require('lodash'),\n  through = require('through2'),\n  gutil = require('gulp-util'),\n  glogg = require('glogg'),\n  http = require('http'),\n  https = require('https'),\n  inject = require('connect-inject'),\n  connect = require('connect'),\n  proxy = require('proxy-middleware'),\n  watch = require('node-watch'),\n  fs = require('fs'),\n  serveIndex = require('serve-index'),\n  serveStatic = require('serve-static'),\n  path = require('path'),\n  open = require('open'),\n  enableMiddlewareShorthand = require('./enableMiddlewareShorthand'),\n  socket = require('socket.io'),\n  url = require('url'),\n  extend = require('node.extend');\n\nvar BROWSER_SCIPTS_DIR = path.join(__dirname, 'browser-scripts');\n\nvar levels = [\n  'error',\n  'warn',\n  'info',\n  'debug',\n];\nvar instanceNumber = 0;\n\nfunction bindLogger(logLevel, kind) {\n  var logger = glogg('gulp-server-livereload-' + kind + '-' + instanceNumber);\n\n  logLevel = levels.indexOf(logLevel) + 1;\n\n  if (!logLevel) {\n    throw 'Logging level \"' + logLevel + '\" does not exist!';\n  }\n\n  levels\n    .filter(function (item, i) {\n      return i < logLevel;\n    })\n    .forEach(function (level) {\n      logger.on(level, function () {\n        gutil.log.apply(gutil.log, arguments);\n      });\n    });\n\n  return logger;\n}\n\nmodule.exports = function(options) {\n  var defaults = {\n    /**\n     *\n     * BASIC DEFAULTS\n     *\n     **/\n    host: 'localhost',\n    port: 8000,\n    defaultFile: 'index.html',\n    fallback: null,\n    fallbackLogic: function(req, res, fallbackFile) {\n      res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n      fs.createReadStream(fallbackFile).pipe(res);\n    },\n    https: false,\n    open: false,\n    log: 'info',\n    clientLog: 'debug',\n\n    /**\n     *\n     * MIDDLEWARE DEFAULTS\n     *\n     * NOTE:\n     *  All middleware should defaults should have the 'enable'\n     *  property if you want to support shorthand syntax like:\n     *\n     *    webserver({\n     *      livereload: true\n     *    });\n     *\n     */\n\n    // Middleware: Livereload\n    livereload: {\n      enable: false,\n      markupHost: null,\n      port: 35729,\n      filter: function(filename, cb) {\n        cb( !(/node_modules/.test(filename)) );\n      },\n      clientConsole: false,\n    },\n\n    // Middleware: Directory listing\n    // For possible options, see:\n    //  https://github.com/expressjs/serve-index\n    directoryListing: {\n      enable: false,\n      path: './',\n      options: undefined\n    },\n\n    // Middleware: Proxy\n    // For possible options, see:\n    //  https://github.com/andrewrk/connect-proxy\n    proxies: []\n\n  };\n\n  // Deep extend user provided options over the all of the defaults\n  // Allow shorthand syntax, using the enable property as a flag\n  var config = enableMiddlewareShorthand(defaults, options, ['directoryListing', 'livereload']);\n\n  var logger = bindLogger(config.log, 'server');\n  var clientLogger = bindLogger(config.clientLog, 'client');\n\n  instanceNumber += 1;\n\n  var httpsOptions = {\n    key: fs.readFileSync(config.https.key || __dirname + '/../ssl/dev-key.pem'),\n    cert: fs.readFileSync(config.https.cert || __dirname + '/../ssl/dev-cert.pem')\n  };\n\n  var openInBrowser = function () {\n    if (config.open === false) return;\n    open('http' + (config.https ? 's' : '') + '://' + config.host + ':' + config.port);\n    openInBrowser = undefined;\n  };\n\n  // connect app\n  var app = connect();\n\n  // Disable browser cache(fix #15)\n  app.use(function (req, res, next) {\n    res.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    res.setHeader(\"Pragma\", \"no-cache\");\n    res.setHeader(\"Expires\", 0);\n\n    next();\n  });\n\n  // Proxy requests\n  for (var i = 0, len = config.proxies.length; i < len; i++) {\n    var proxyoptions = url.parse(config.proxies[i].target);\n    if (config.proxies[i].hasOwnProperty('options')) {\n      extend(proxyoptions, config.proxies[i].options);\n    }\n\n    proxyoptions.route = config.proxies[i].source;\n    app.use(proxy(proxyoptions));\n\n    logger.debug(config.proxies[i].source + ' is proxied.');\n  }\n  //  directory listing\n  if (config.directoryListing.enable) {\n    app.use(serveIndex(path.resolve(config.directoryListing.path), config.directoryListing.options));\n  }\n\n  // socket.io\n  if (config.livereload.enable) {\n    var snippetParams = [];\n\n    if (config.livereload.clientConsole) {\n      snippetParams.push(\"extra=capture-console\");\n    }\n\n    // If it wasn't provided, use the server host:\n    var markupHost = !!_.get(config.livereload.markupHost, 'length')\n      ? \"'\" + config.livereload.markupHost + \"'\"\n      : null;\n\n    var snippet =\n      \"<script type=\\\"text/javascript\\\">\"\n      + \"var _lrscript = document.createElement('script');\"\n      + \"_lrscript.type = 'text/javascript';\"\n      + \"_lrscript.defer = _lrscript.async = true;\"\n      + \"_lrscript.src = '//' + ((\" + markupHost + \"||location.host).split(':')[0]) + ':\"+config.livereload.port+\"/livereload.js?\"+snippetParams.join('&')+\"';\"\n      + \"document.body.appendChild(_lrscript);\"\n      + \"</script>\";\n\n    var prepend = function(w, s) {\n      return s + w;\n    };\n\n    var append = function(w, s) {\n      return w + s;\n    }\n\n    app.use(inject({\n      snippet: snippet,\n      rules: [{\n        match: /<\\/body>/,\n        fn: prepend\n      }, {\n        match: /<\\/html>/,\n        fn: prepend\n      }, {\n        match: /<\\!DOCTYPE.+>/,\n        fn: append\n      }]\n    }));\n\n    var io = config.livereload.io = socket();\n    io.serveClient(true);\n    io.path(\"\");\n    io.on('connection', function(socket){\n      logger.info('Livereload client connected');\n\n      socket.on('console', function(params){\n        var method = params.method,\n          data = params.data,\n          methodLabel = gutil.colors.green(method.toUpperCase()),\n          translatedMethod = 'info';\n\n        switch (method) {\n          case 'error':\n            methodLabel = gutil.colors.red('ERROR');\n            translatedMethod = 'error';\n            break;\n          case 'warn':\n            methodLabel = gutil.colors.yellow('WARN');\n            translatedMethod = 'warn';\n            break;\n          case 'info':\n            methodLabel = gutil.colors.cyan('INFO');\n            translatedMethod = 'info';\n            break;\n          case 'debug':\n          case 'trace':\n            methodLabel = gutil.colors.blue('DEBUG');\n            translatedMethod = 'debug';\n            break;\n        }\n        var args = ['[Client:' + methodLabel + ']'];\n\n        for (var i in data) {\n          args.push(data[i]);\n        }\n\n        clientLogger[translatedMethod].apply(clientLogger, args);\n      });\n    });\n\n    var ioApp = connect();\n\n    ioApp.use(serveStatic(BROWSER_SCIPTS_DIR, { index: false }));\n\n    var ioServerBase = config.https\n      ? https.createServer(httpsOptions, ioApp)\n      : http.createServer(ioApp);\n\n    var ioServer = config.livereload.ioServer =\n      ioServerBase.listen(config.livereload.port, config.host);\n\n    io.attach(ioServer, {\n      path: '/socket.io'\n    });\n\n    logger.debug('Livereload started at', gutil.colors.gray('http' + (config.https ? 's' : '') + '://' + config.host + ':' + config.livereload.port));\n  }\n\n  // http server\n  var webserver = null;\n  if (config.https) {\n    webserver = https.createServer(httpsOptions, app);\n  }\n  else {\n    webserver = http.createServer(app);\n  }\n\n  var files = [];\n\n  // Create server\n  var stream = through.obj(function(file, enc, callback) {\n    if ('debug' === config.log) {\n      app.use(function(req, res, next) {\n        logger.debug(req.method + ' ' + req.url);\n\n        next();\n      });\n    }\n\n\n    app.use(serveStatic(file.path, {\n      index: (config.directoryListing.enable ? false : config.defaultFile)\n    }));\n\n    if (config.livereload.enable) {\n      watch(file.path, function(filename) {\n        config.livereload.filter(filename, function(shouldReload) {\n          if (shouldReload) {\n            logger.debug('Livereload: file changed: ' + filename);\n\n            config.livereload.io.sockets.emit('reload');\n            // Treat changes to sourcemaps as changes to the original files.\n            filename = filename.replace(/\\.map$/, '');\n\n            config.livereload.io.sockets.emit('file_changed', {\n              path: filename,\n              name: path.basename(filename),\n              ext: path.extname(filename),\n            });\n          }\n        });\n      });\n    }\n\n    this.push(file);\n\n    callback();\n  })\n  .on('data', function(f) {\n    files.push(f);\n\n    // start the web server\n    webserver.listen(config.port, config.host, openInBrowser);\n\n    logger.info('Webserver started at', gutil.colors.cyan('http' + (config.https ? 's' : '') + '://' + config.host + ':' + config.port));\n  })\n  .on('end', function(){\n    if (config.fallback) {\n      files.forEach(function(file){\n        var fallbackFile = file.path + '/' + config.fallback;\n        if (fs.existsSync(fallbackFile)) {\n          app.use(function(req, res) {\n            return config.fallbackLogic(req, res, fallbackFile);\n          });\n        }\n      });\n    }\n  });\n\n\n  // once stream killed\n  stream.on('kill', function() {\n    webserver.close();\n\n    if (config.livereload.enable) {\n      config.livereload.ioServer.close();\n    }\n  });\n\n  return stream;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/node_modules/gulp-server-livereload/src/enableMiddlewareShorthand/index.js":"var extend = require('node.extend');\n\n// TODO: Make this its own npm module and repo\nmodule.exports = function(defaults, options, props)\n{\n  var originalDefaults = extend(true, {},defaults);\n  var config = extend(true, defaults, options);\n\n  // If we get a single string, convert it to a single item array\n  if(Object.prototype.toString.call(props) == '[object String]') {\n    props = [props];\n  }\n\n  // Loop through all of the given middlewares\n  for (var i = 0, len = props.length; i < len; i++) {\n    var prop = props[i];\n    // If using the shorthand syntax\n    if (config[prop] === true) {\n      // Replace the given tree for the tree defaults\n      config[prop] = extend(true, {}, originalDefaults[prop]);\n      // Set the enable flag, which then can be reliably used for conditionals\n      config[prop].enable = true;\n    }\n  }\n  return config;\n};","/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/node_modules/gulp-server-livereload/bin/livereload.js":"#!/usr/bin/env node\n\nvar server = require('../src/index.js');\nvar fs = require('vinyl-fs');\n\nvar opts = {};\n\nvar program = require('commander');\n\nprogram\n\t.version('1.2.4')\n\t.option('-n, --no-browser', 'Do not open in a Browser')\n\t.option('-l, --log [type]', 'Log level (default: info)', 'info')\n\t.option('-p, --port <n>', 'The port to run on', parseInt)\n\t.parse(process.argv);\n\nif (program.log)\n\topts.log = program.log;\nif (program.noBrowser)\n\topts.open = false;\nif (program.port)\n\topts.port = program.port;\nif (program.host)\n\topts.host = program.host;\n\nopts.livereload = {\n  enable: true\n};\n\nfs.src('.').pipe(server(opts));\n","/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/node_modules/gulp-server-livereload/src/browser-scripts/capture-console.js":"(function(){\n  var socket = window.__socket;\n\n  if (!socket) {\n    return;\n  }\n\n  var __console = {};\n\n  ['error','info','log','warn'].forEach(function(method) {\n    window.console[method] = (function() {\n      __console[method] = window.console[method];\n\n      return function() {\n        var args = arguments, success;\n\n        try {\n          args = JSON.parse(JSON.stringify(args));\n          success = true;\n        } catch (e) {\n          ___console.error(e + ', console.' + method + ' will not be sent to livereload server', args);\n        }\n\n        try {\n          if (success) {\n            socket.emit('console', {\n              method: method,\n              data: args\n            });\n          }\n        } catch (e) {}\n\n        try {\n          if (__console[method]) {\n            __console[method].apply(null, arguments);\n          }\n        } catch (e) {\n          __console.error(e, arguments);\n        }\n      };\n    })();\n  });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-gulp-server-livereload/node_modules/gulp-server-livereload/src/browser-scripts/livereload.js":"(function() {\n  var __require, __define;\n  if (typeof require !== 'undefined' && typeof requirejs !== 'undefined' && require === requirejs) {\n    __require = require;\n    __define = define;\n    require = define = null;\n  }\n\n  var __consoleLog = window.console.log.bind(window.console);\n  var __log = function(msg) {\n    __consoleLog('LIVERELOAD: ' + msg);\n  };\n\n\n  var __parseURL = function(url) {\n    var parser = document.createElement('a');\n    parser.href = url;\n    return parser;\n  };\n\n\n\n  var __getSetupInfo = function() {\n    var tags = document.getElementsByTagName('script');\n\n    for (var i=0; i<tags.length; ++i) {\n      var tag = tags[i],\n        tagSrc = tag.getAttribute('src') || '';\n\n      if (0 < tagSrc.indexOf('livereload.js')) {\n        var serverUrl = __parseURL(tagSrc);\n\n        return {\n          serverUrl: serverUrl.protocol + '//' + serverUrl.hostname + ':' + serverUrl.port,\n          query: serverUrl.search,\n        };\n      }\n    }\n  };\n\n\n  var __addUrlQueryParam = function(href, key, val) {\n    if (0 > href.indexOf('?')) {\n      href += '?';\n    } else {\n      var pos = href.indexOf(key);\n\n      if (0 < pos) {\n        href = href.substr(0, pos);\n      }\n    }\n\n    var lastChar = href.charAt(href.length-1);\n    if ('?' !== lastChar && '&' !== lastChar) {\n      href += '&';\n    }\n\n    href += key + '=' + val;\n\n    return href;\n  };\n\n\n  /*\n  Reload page\n\n  We check that page is live and can be accessed before we actually do it.\n  This prevents the browser from throwing a 404 error.\n   */\n  var __currentlyReloading = false;\n  var __reloadPage = function() {\n    if (__currentlyReloading) {\n      return;\n    } else {\n      __currentlyReloading = true;\n    }\n\n    var __reloadPageInnerLoop;\n\n    (__reloadPageInnerLoop = function() {\n      __log('wait until we can reload browser');\n\n      var request = new XMLHttpRequest();\n      request.open('GET', location.href, true);\n      request.onreadystatechange = function(){\n        if (request.readyState === 4){\n          if (200 <= request.status) {\n            __log('reloading page...');\n\n            location.reload();\n          } else {\n            setTimeout(function() {\n              __reloadPageInnerLoop();\n            }, 1000);\n          }\n        }\n      };\n      request.send();\n    })();\n  };\n\n\n\n\n  if (!window._onLiveReloadFileChanged) {\n    window._onLiveReloadFileChanged = function(file) {\n      if (!file) {\n        return;\n      }\n\n      // CSS changed?\n      if ('.css' === file.ext) {\n        var linkTags = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n        Array.prototype.forEach.call(linkTags, function(linkTag) {\n          if (0 <= linkTag.href.indexOf(file.name) && !linkTag.dataset.reloading) {\n            var clone = linkTag.cloneNode(false);\n            var href = linkTag.getAttribute('href');\n            href = __addUrlQueryParam(href, '_lf', Date.now());\n            clone.setAttribute('href', href);\n            // Only remove the original once the new one loads, to prevent FOUC\n            clone.addEventListener('load', function () {\n              linkTag.parentElement.removeChild(linkTag)\n              __log('reloaded css: ' + file.name);\n            });\n            linkTag.parentElement.insertBefore(clone, linkTag.nextElementSibling);\n\n            // Prevent race conditions from other reloads before this one finishes\n            linkTag.dataset.reloading = true;\n\n            __log('reloading css: ' + file.name);\n          }\n        });\n      }\n      // other stuff changed\n      else {\n        __reloadPage();\n      }\n    }\n  }\n\n\n\n  // get URL back to server\n  var setupInfo = __getSetupInfo();\n  if (!setupInfo) {\n    return __log('unable to find server address');\n  } else {\n    __log('server at ' + setupInfo.serverUrl);\n  }\n\n  var __loadScript = function(path, onload, onerror) {\n    __log('load script ' + path);\n\n    var lr = document.createElement('script');\n    lr.type = 'text/javascript';\n    lr.async = true;\n    lr.src = setupInfo.serverUrl + '/' + path;\n\n    lr.onload = onload;\n    lr.onerror = function() {\n      __log(\"failed to load script\");\n    };\n\n    var s = document.getElementsByTagName('script')[0];\n    s.parentNode.insertBefore(lr, s);\n  };\n\n\n  __alreadyLoadedExtraScripts = false;\n\n  var __loadExtraScripts = function() {\n    if (__alreadyLoadedExtraScripts) {\n      return;\n    }\n\n    __alreadyLoadedExtraScripts = true;\n\n    // load in extra scripts\n    var extras = setupInfo.query.split('=');\n    if (1 < extras.length) {\n      extras = extras[1].split(\",\");\n\n      extras.forEach(function(extra) {\n        __loadScript(extra + '.js');\n      });\n    }\n  }\n\n\n\n  __loadScript('socket.io.js', function() {\n    if (__require) {\n      require = __require;\n      define = __define;\n    }\n\n    __log('connecting to server');\n\n    var __socket = window.__socket = io.connect(setupInfo.serverUrl);\n\n    __socket.on('connect', function() {\n      __log('successfully connected');\n\n      __loadExtraScripts();\n    });\n\n    __socket.on('connect_error', function(err) {\n      __log('failed to connect: ' + err);\n    });\n\n    __socket.on('file_changed', function(file) {\n      try {\n        window._onLiveReloadFileChanged(file);\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  });\n\n})();\n"}